# Merge the in-degree values with the SE data frame by node_name
se_df$in_degree <- in_degrees[se_df$node_name]
# Calculate the ratio of exp_se to linear_se
se_df$exp_to_linear_se <- se_df$exp_se / se_df$linear_se
# Scatter plot of in-degree vs. exp_se / linear_se
plot(se_df$in_degree, se_df$exp_to_linear_se,
xlab = "In-degree", ylab = "exp_se / linear_se",
main = "Scatter plot of In-degree vs. exp_se / linear_se",
pch = 19, col = "blue")
# Compute the correlation between in-degree and the ratio exp_se / linear_se
correlation <- cor(se_df$in_degree, se_df$exp_to_linear_se, use = "complete.obs")
# Return the correlation value
return(correlation)
}
plot_and_compute_correlation(graph,papers_classA_SE)
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,10,900),2000,100)
papers_sample_se <- get_SE_table(graph,papers_sample,dates_matrix)
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,50,900),2000,100)
papers_sample_se <- get_SE_table(graph,papers_sample,dates_matrix)
plot_and_compute_correlation(graph,papers_sample_se)
fit_and_plot <- function(cf) {
# Create a data frame from the cumulative frequency data
start_year <- min(as.numeric(names(cf)))
df <- data.frame(year = start_year:2002, cf = cf)
# Fit linear, polynomial, and exponential models
linear_model <- lm(cf ~ year, data = df)
poly_model <- lm(cf ~ poly(year, 2), data = df)
exp_model <- glm(cf ~ year, data = df, family = poisson)
# Extract standard error (mean) for each model
linear_se <- mean(summary(linear_model)$residuals^2)
exp_se <- mean(summary(exp_model)$residuals^2)
# Plot the data and fitted models
plot(df$year, df$cf, type = "b", xlab = "Year", ylab = "Cumulative Frequency")
lines(df$year, predict(linear_model), col = "red")
lines(df$year, predict(exp_model, type = "response"), col = "green")
lines(df$year, predict(poly_model), col = "blue")
legend("topleft", legend = c("Linear", "Exponential", "Polynomial"),
col = c("red", "green", "blue"), lty = 1)
# Return mean standard error values
return(list(linear_se = linear_se, exp_se = exp_se))
}
fit_and_plot(test_growth)
fit_and_noplot <- function(cf) {
# Create a data frame from the cumulative frequency data
start_year <- min(as.numeric(names(cf)))
df <- data.frame(year = start_year:2002, cf = cf)
# Fit linear, polynomial, and exponential models
linear_model <- lm(cf ~ year, data = df)
exp_model <- glm(cf ~ year, data = df, family = poisson)
# Extract standard error (mean) for each model
linear_se <- mean(summary(linear_model)$residuals^2)
exp_se <- mean(summary(exp_model)$residuals^2)
# Return mean standard error values
return(list(linear_se = linear_se,  exp_se = exp_se))
}
fit_and_noplot(test_growth)
fit_and_noplot <- function(cf) {
# Create a data frame from the cumulative frequency data
start_year <- min(as.numeric(names(cf)))
df <- data.frame(year = start_year:2002, cf = cf)
# Fit linear, polynomial, and exponential models
linear_model <- lm(cf ~ year, data = df)
exp_model <- glm(cf ~ year, data = df, family = poisson)
# Extract standard error (mean) for each model
linear_se <- mean(summary(linear_model)$residuals^2)
exp_se <- mean(exp_model$residuals^2)
# Return mean standard error values
return(list(linear_se = linear_se,  exp_se = exp_se))
}
fit_and_noplot(test_growth)
fit_and_plot <- function(cf) {
# Create a data frame from the cumulative frequency data
start_year <- min(as.numeric(names(cf)))
df <- data.frame(year = start_year:2002, cf = cf)
# Fit linear, polynomial, and exponential models
linear_model <- lm(cf ~ year, data = df)
poly_model <- lm(cf ~ poly(year, 2), data = df)
exp_model <- glm(cf ~ year, data = df, family = poisson)
# Extract standard error (mean) for each model
linear_se <- mean(summary(linear_model)$residuals^2)
exp_se <- mean(exp_model$residuals^2)
# Plot the data and fitted models
plot(df$year, df$cf, type = "b", xlab = "Year", ylab = "Cumulative Frequency")
lines(df$year, predict(linear_model), col = "red")
lines(df$year, predict(exp_model, type = "response"), col = "green")
lines(df$year, predict(poly_model), col = "blue")
legend("topleft", legend = c("Linear", "Exponential", "Polynomial"),
col = c("red", "green", "blue"), lty = 1)
# Return mean standard error values
return(list(linear_se = linear_se, exp_se = exp_se))
}
fit_and_plot(test_growth)
get_SE_table <- function(graph, papers,dates_matrix){
results_df <- data.frame(paper_id = character(),
linear_sse = numeric(),
exp_sse = numeric())
for( paper in papers){
node_name <- V(graph)$name[V(graph) == as.character(paper)]
paper_citation_dates <- get_neighbours_dates(graph,paper,dates_matrix)
citation_growth_paper <- get_citationgrowth_data(paper_citation_dates)
result<- fit_and_noplot(citation_growth_paper)
new_row <- data.frame(node_name = node_name,
linear_se = result$linear_se,
exp_se = result$exp_se)
results_df <- rbind(results_df, new_row)
}
return (results_df)
}
plot_se_boxplots <- function(se_df) {
boxplot(se_df$linear_se, se_df$exp_se,
names = c("Linear Model", "Exponential Model"),
col = c("lightblue", "lightgreen"),
main = "Standard Error Boxplots",
ylab = "Standard Error",
xlab = "Model Type")
}
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
papers_classA_SE
plot_se_boxplots(papers_classA_SSE)
select_random_papers <- function(papers, seed, n) {
# Set the random seed for reproducibility
set.seed(seed)
# Sample n random papers without replacement
random_papers <- sample(papers, n, replace = FALSE)
return(random_papers)
}
papers_classB_sample <- select_random_papers(papers_classB,2000,30)
papers_classB_sample_SE <- get_SE_table(graph,papers_classB_sample,dates_matrix)
papers_classB_sample_SE
plot_se_boxplots(papers_classB_sample_SE)
papers_classC_sample <- select_random_papers(papers_classC,2000,30)
papers_classC_sample_SE <- get_SE_table(graph,papers_classC_sample,dates_matrix)
papers_classC_sample_SE
plot_se_boxplots(papers_classC_sample_SE)
plot_and_compute_correlation <- function(graph, se_df) {
# Check if required columns exist
required_columns <- c("node_name", "linear_se", "exp_se")
missing_columns <- setdiff(required_columns, colnames(se_df))
if(length(missing_columns) > 0) {
stop(paste("se_df is missing the following columns:", paste(missing_columns, collapse = ", ")))
}
# Calculate in-degree for each node in the graph
in_degrees <- degree(graph, mode = "in")
# Merge the in-degree values with the SE data frame by node_name
se_df$in_degree <- in_degrees[se_df$node_name]
# Calculate the ratio of exp_se to linear_se
se_df$exp_to_linear_se <- se_df$exp_se / se_df$linear_se
# Scatter plot of in-degree vs. exp_se / linear_se
plot(se_df$in_degree, se_df$exp_to_linear_se,
xlab = "In-degree", ylab = "exp_se / linear_se",
main = "Scatter plot of In-degree vs. exp_se / linear_se",
pch = 19, col = "blue")
# Compute the correlation between in-degree and the ratio exp_se / linear_se
correlation <- cor(se_df$in_degree, se_df$exp_to_linear_se, use = "complete.obs")
# Return the correlation value
return(correlation)
}
plot_and_compute_correlation(graph,papers_classA_SE)
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,50,900),2000,100)
papers_sample_se <- get_SE_table(graph,papers_sample,dates_matrix)
plot_and_compute_correlation(graph,papers_sample_se)
get_SE_table <- function(graph, papers,dates_matrix){
results_df <- data.frame(paper_id = character(),
linear_sse = numeric(),
exp_sse = numeric())
for( paper in papers){
node_name <- V(graph)$name[V(graph) == as.character(paper)]
paper_citation_dates <- get_neighbours_dates(graph,paper,dates_matrix)
citation_growth_paper <- get_citationgrowth_data(paper_citation_dates)
result<- fit_and_noplot(citation_growth_paper)
new_row <- data.frame(node_name = node_name,
linear_se = result$linear_se,
exp_se = result$exp_se)
results_df <- rbind(results_df, new_row)
}
return (results_df)
}
plot_se_boxplots <- function(se_df) {
boxplot(se_df$linear_se, se_df$exp_se,
names = c("Linear Model", "Exponential Model"),
col = c("lightblue", "lightgreen"),
main = "MSE Boxplots",
ylab = "MSE Error",
xlab = "Model Type")
}
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
papers_classA_SE
plot_se_boxplots(papers_classA_SSE)
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
papers_classA_SE
plot_se_boxplots(papers_classA_SSE, "Class A MSE")
get_SE_table <- function(graph, papers,dates_matrix){
results_df <- data.frame(paper_id = character(),
linear_sse = numeric(),
exp_sse = numeric())
for( paper in papers){
node_name <- V(graph)$name[V(graph) == as.character(paper)]
paper_citation_dates <- get_neighbours_dates(graph,paper,dates_matrix)
citation_growth_paper <- get_citationgrowth_data(paper_citation_dates)
result<- fit_and_noplot(citation_growth_paper)
new_row <- data.frame(node_name = node_name,
linear_se = result$linear_se,
exp_se = result$exp_se)
results_df <- rbind(results_df, new_row)
}
return (results_df)
}
plot_se_boxplots <- function(se_df,title) {
boxplot(se_df$linear_se, se_df$exp_se,
names = c("Linear Model", "Exponential Model"),
col = c("lightblue", "lightgreen"),
main = title,
ylab = "MSE Error",
xlab = "Model Type")
}
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
papers_classA_SE
plot_se_boxplots(papers_classA_SSE, "Class A MSE")
papers_classB_sample <- select_random_papers(papers_classB,2000,30)
papers_classB_sample_SE <- get_SE_table(graph,papers_classB_sample,dates_matrix)
papers_classB_sample_SE
plot_se_boxplots(papers_classB_sample_SE,"Class B Sample MSE")
papers_classC_sample <- select_random_papers(papers_classC,2000,30)
papers_classC_sample_SE <- get_SE_table(graph,papers_classC_sample,dates_matrix)
papers_classC_sample_SE
plot_se_boxplots(papers_classC_sample_SE, "Class C Sample MSE")
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,50,900),2000,100)
library(igraph)
edges <- read.delim("Cit-HepPh.txt", header=FALSE, comment.char="#")
dates <- read.delim("cit-HepPh-dates-clean.txt", header=FALSE, comment.char="#")
edges_matrix <- as.matrix(edges)
edges_matrix <- apply(edges_matrix, 2, as.character)
dates_matrix <- as.matrix(dates)
dates_matrix[,1] <- as.character(dates_matrix[,1])
create_graph <- function(edges_matrix,dates_matrix) {
g <- graph_from_edgelist(as.matrix(edges_matrix), directed = TRUE)
isolated_nodes <- V(g)[degree(g, mode = "all") == 0]
g_cleaned <- delete_vertices(g, isolated_nodes)
node_names <- V(g_cleaned)$name
node_dates <- dates_matrix[match(node_names, dates_matrix[, 1]), 2]
return(g_cleaned)
}
graph <- create_graph(edges_matrix,dates_matrix)
vcount(graph)
# Function to compute indegree distribution and plot as a line graph
plot_indegree_distribution <- function(graph, ylim = NULL) {
indegrees <- degree(graph, mode = "in")               # Compute indegree for all nodes
indegree_distribution <- table(indegrees)            # Frequency of each indegree value
x <- as.numeric(names(indegree_distribution))        # Indegree values
y <- as.numeric(indegree_distribution)               # Frequencies
# Plot the line graph
plot(x, y,
type = "o",                                     # Line graph with points
col = "blue",
xlab = "Indegree",
ylab = "Frequency",
main = "Indegree Distribution",
ylim = ylim,                                    # Set y-axis limits if provided
pch = 16)                                       # Solid points
}
plot_indegree_distribution(graph, c(0,2500))
# Function to get nodes with indegree in a specific range
get_nodes_by_indegree_range <- function(graph, indegree_min, indegree_max) {
# Compute indegree for all nodes
indegrees <- degree(graph, mode = "in")
# Filter nodes within the specified indegree range
nodes_in_range <- V(graph)[indegrees >= indegree_min & indegrees <= indegree_max]
return (nodes_in_range)
}
papers_classA <- get_nodes_by_indegree_range(graph, 300, 900)
papers_classA
papers_classB <- get_nodes_by_indegree_range(graph,100,299)
papers_classB
papers_classC <- get_nodes_by_indegree_range(graph,50,99)
papers_classC
papers_class_all <- get_nodes_by_indegree_range(graph,0,900)
papers_class_all
get_neighbours_dates <- function(graph, node, dates_matrix) {
# Get the neighbors of the given node
neighbors_ids <- neighbors(graph, node, mode = "in")$name
# Convert dates_matrix to a data frame for easier manipulation
dates_df <- as.data.frame(dates_matrix, stringsAsFactors = FALSE)
colnames(dates_df) <- c("id", "date")
# Filter the dates_df to include only neighbors
neighbors_data <- dates_df[dates_df$id %in% neighbors_ids, ]
# Return the resulting data frame
return(neighbors_data)
}
test_dates<- get_neighbours_dates(graph,papers_classA[2],dates_matrix)
test_dates
get_citationgrowth_data <- function(dates_matrix_of_neighbours) {
# Handle NA values
dates_matrix_clean <- dates_matrix_of_neighbours[!is.na(dates_matrix_of_neighbours[,2]),]
# Get the minimum and maximum year
min_year <- min(dates_matrix_clean[, 2])
max_year <- max(dates_matrix_clean[, 2])
# Create a sequence of years from min_year to 2002
years <- min_year:2002
# Count citations for each year, handling missing years
year_counts <- sapply(years, function(year) {
sum(dates_matrix_clean[, 2] == year)
})
# Calculate cumulative frequency
cum_freq <- cumsum(year_counts)
names(cum_freq)<- years
return(cum_freq)
}
test_growth<- get_citationgrowth_data(test_dates)
test_growth
fit_and_plot <- function(cf) {
# Create a data frame from the cumulative frequency data
start_year <- min(as.numeric(names(cf)))
df <- data.frame(year = start_year:2002, cf = cf)
# Fit linear, polynomial, and exponential models
linear_model <- lm(cf ~ year, data = df)
poly_model <- lm(cf ~ poly(year, 2), data = df)
exp_model <- glm(cf ~ year, data = df, family = poisson)
# Extract standard error (mean) for each model
linear_se <- mean(summary(linear_model)$residuals^2)
exp_se <- mean(exp_model$residuals^2)
# Plot the data and fitted models
plot(df$year, df$cf, type = "b", xlab = "Year", ylab = "Cumulative Frequency")
lines(df$year, predict(linear_model), col = "red")
lines(df$year, predict(exp_model, type = "response"), col = "green")
lines(df$year, predict(poly_model), col = "blue")
legend("topleft", legend = c("Linear", "Exponential", "Polynomial"),
col = c("red", "green", "blue"), lty = 1)
# Return mean standard error values
return(list(linear_se = linear_se, exp_se = exp_se))
}
fit_and_plot(test_growth)
fit_and_noplot <- function(cf) {
# Create a data frame from the cumulative frequency data
start_year <- min(as.numeric(names(cf)))
df <- data.frame(year = start_year:2002, cf = cf)
# Fit linear, polynomial, and exponential models
linear_model <- lm(cf ~ year, data = df)
exp_model <- glm(cf ~ year, data = df, family = poisson)
# Extract standard error (mean) for each model
linear_se <- mean(summary(linear_model)$residuals^2)
exp_se <- mean(exp_model$residuals^2)
# Return mean standard error values
return(list(linear_se = linear_se,  exp_se = exp_se))
}
fit_and_noplot(test_growth)
get_SE_table <- function(graph, papers,dates_matrix){
results_df <- data.frame(paper_id = character(),
linear_sse = numeric(),
exp_sse = numeric())
for( paper in papers){
node_name <- V(graph)$name[V(graph) == as.character(paper)]
paper_citation_dates <- get_neighbours_dates(graph,paper,dates_matrix)
citation_growth_paper <- get_citationgrowth_data(paper_citation_dates)
result<- fit_and_noplot(citation_growth_paper)
new_row <- data.frame(node_name = node_name,
linear_se = result$linear_se,
exp_se = result$exp_se)
results_df <- rbind(results_df, new_row)
}
return (results_df)
}
plot_se_boxplots <- function(se_df,title) {
boxplot(se_df$linear_se, se_df$exp_se,
names = c("Linear Model", "Exponential Model"),
col = c("lightblue", "lightgreen"),
main = title,
ylab = "MSE Error",
xlab = "Model Type")
}
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
papers_classA_SE
plot_se_boxplots(papers_classA_SSE, "Class A MSE")
select_random_papers <- function(papers, seed, n) {
# Set the random seed for reproducibility
set.seed(seed)
# Sample n random papers without replacement
random_papers <- sample(papers, n, replace = FALSE)
return(random_papers)
}
papers_classB_sample <- select_random_papers(papers_classB,2000,30)
papers_classB_sample_SE <- get_SE_table(graph,papers_classB_sample,dates_matrix)
papers_classB_sample_SE
plot_se_boxplots(papers_classB_sample_SE,"Class B Sample MSE")
papers_classC_sample <- select_random_papers(papers_classC,2000,30)
papers_classC_sample_SE <- get_SE_table(graph,papers_classC_sample,dates_matrix)
papers_classC_sample_SE
plot_se_boxplots(papers_classC_sample_SE, "Class C Sample MSE")
plot_and_compute_correlation <- function(graph, se_df) {
# Check if required columns exist
required_columns <- c("node_name", "linear_se", "exp_se")
missing_columns <- setdiff(required_columns, colnames(se_df))
if(length(missing_columns) > 0) {
stop(paste("se_df is missing the following columns:", paste(missing_columns, collapse = ", ")))
}
# Calculate in-degree for each node in the graph
in_degrees <- degree(graph, mode = "in")
# Merge the in-degree values with the SE data frame by node_name
se_df$in_degree <- in_degrees[se_df$node_name]
# Calculate the ratio of exp_se to linear_se
se_df$exp_to_linear_se <- se_df$exp_se / se_df$linear_se
# Scatter plot of in-degree vs. exp_se / linear_se
plot(se_df$in_degree, se_df$exp_to_linear_se,
xlab = "In-degree", ylab = "exp_se / linear_se",
main = "Scatter plot of In-degree vs. exp_se / linear_se",
pch = 19, col = "blue")
# Compute the correlation between in-degree and the ratio exp_se / linear_se
correlation <- cor(se_df$in_degree, se_df$exp_to_linear_se, use = "complete.obs")
# Return the correlation value
return(correlation)
}
plot_and_compute_correlation(graph,papers_classA_SE)
plot_and_compute_correlation <- function(graph, se_df) {
# Check if required columns exist
required_columns <- c("node_name", "linear_se", "exp_se")
missing_columns <- setdiff(required_columns, colnames(se_df))
if(length(missing_columns) > 0) {
stop(paste("se_df is missing the following columns:", paste(missing_columns, collapse = ", ")))
}
# Calculate in-degree for each node in the graph
in_degrees <- degree(graph, mode = "in")
# Merge the in-degree values with the SE data frame by node_name
se_df$in_degree <- in_degrees[se_df$node_name]
# Calculate the ratio of exp_se to linear_se
se_df$exp_to_linear_se <- se_df$exp_se / se_df$linear_se
# Scatter plot of in-degree vs. exp_se / linear_se
plot(se_df$in_degree, se_df$exp_to_linear_se,
xlab = "In-degree", ylab = "exp_se / linear_se",
main = "Scatter plot of In-degree vs. exp_se / linear_se",
pch = 19, col = "blue")
# Compute the correlation between in-degree and the ratio exp_se / linear_se
correlation <- cor(se_df$in_degree, se_df$exp_to_linear_se, use = "complete.obs")
# Return the correlation value
return(correlation)
}
plot_and_compute_correlation(graph,papers_classA_SE)
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,50,900),2000,100)
papers_sample_se <- get_SE_table(graph,papers_sample,dates_matrix)
plot_and_compute_correlation(graph,papers_sample_se)
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,50,900),2000,100)
papers_sample_se <- get_SE_table(graph,papers_sample,dates_matrix)
papers_sample_se
plot_and_compute_correlation(graph,papers_sample_se)
plot_and_compute_correlation <- function(graph, se_df) {
# Check if required columns exist
required_columns <- c("node_name", "linear_se", "exp_se")
missing_columns <- setdiff(required_columns, colnames(se_df))
if(length(missing_columns) > 0) {
stop(paste("se_df is missing the following columns:", paste(missing_columns, collapse = ", ")))
}
# Calculate in-degree for each node in the graph
in_degrees <- degree(graph, mode = "in")
# Merge the in-degree values with the SE data frame by node_name
se_df$in_degree <- in_degrees[se_df$node_name]
# Calculate the ratio of exp_se to linear_se
se_df$exp_to_linear_se <- se_df$exp_se / se_df$linear_se
# Scatter plot of in-degree vs. exp_se / linear_se
plot(se_df$in_degree, se_df$exp_to_linear_se,
xlab = "In-degree", ylab = "exp_se / linear_se",
main = "Scatter plot of In-degree vs. exp_se / linear_se",
pch = 19, col = "blue")
# Compute the correlation between in-degree and the ratio exp_se / linear_se
correlation <- cor(se_df$in_degree, se_df$exp_to_linear_se, use = "complete.obs", method="pearson")
# Return the correlation value
return(correlation)
}
plot_and_compute_correlation(graph,papers_classA_SE)
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,100,900),2000,100)
papers_sample_se <- get_SE_table(graph,papers_sample,dates_matrix)
papers_sample_se
plot_and_compute_correlation(graph,papers_sample_se)
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,200,900),2000,100)
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,100,900),2000,50)
papers_sample_se <- get_SE_table(graph,papers_sample,dates_matrix)
papers_sample_se
plot_and_compute_correlation(graph,papers_sample_se)
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,100,900),2001,50)
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,100,900),2001,50)
papers_sample_se <- get_SE_table(graph,papers_sample,dates_matrix)
papers_sample_se
plot_and_compute_correlation(graph,papers_sample_se)
plot_and_compute_correlation <- function(graph, se_df) {
# Check if required columns exist
required_columns <- c("node_name", "linear_se", "exp_se")
missing_columns <- setdiff(required_columns, colnames(se_df))
if(length(missing_columns) > 0) {
stop(paste("se_df is missing the following columns:", paste(missing_columns, collapse = ", ")))
}
# Calculate in-degree for each node in the graph
in_degrees <- degree(graph, mode = "in")
# Merge the in-degree values with the SE data frame by node_name
se_df$in_degree <- in_degrees[se_df$node_name]
# Calculate the ratio of exp_se to linear_se
se_df$exp_to_linear_se <- se_df$exp_se / se_df$linear_se
# Scatter plot of in-degree vs. exp_se / linear_se
plot(se_df$in_degree, se_df$exp_to_linear_se,
xlab = "In-degree", ylab = "exp_se / linear_se",
main = "Scatter plot of In-degree vs. exp_se / linear_se",
pch = 19, col = "blue")
# Compute the correlation between in-degree and the ratio exp_se / linear_se
correlation <- cor(se_df$in_degree, se_df$exp_to_linear_se, use = "pairwise.complete.obs", method="pearson")
# Return the correlation value
return(correlation)
}
plot_and_compute_correlation(graph,papers_classA_SE)
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,100,900),2001,50)
papers_sample_se <- get_SE_table(graph,papers_sample,dates_matrix)
papers_sample_se
plot_and_compute_correlation(graph,papers_sample_se)
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,100,900),2000,100)
papers_sample_se <- get_SE_table(graph,papers_sample,dates_matrix)
papers_sample_se
plot_and_compute_correlation(graph,papers_sample_se)
