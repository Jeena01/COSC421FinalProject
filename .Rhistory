}
plot_sse_boxplots <- function(se_df) {
# Gather SSE values into a long format
se_long <- data.frame(
model = rep(c("linear", "exp"), each = nrow(se_df)),
sse = c(sse_df$linear_se,  se_df$exp_se),
paper = rep(se_df$paper_id, 3)
)
# Create boxplot
boxplot(sse ~ model, data = sse_long,
main = "Comparison of Model Performance",
xlab = "Model", ylab = "Sum of Squared Errors (SSE)")
}
papers_classA_SSE <- get_SSE_table(graph,papers_classA,dates_matrix)
plot_sse_boxplots(papers_classA_SSE)
get_SE_table <- function(graph, papers,dates_matrix){
results_df <- data.frame(paper_id = character(),
linear_sse = numeric(),
exp_sse = numeric())
for( paper in papers){
paper_citation_dates <- get_neighbours_dates(graph,paper,dates_matrix)
citation_growth_paper <- get_citationgrowth_data(paper_citation_dates)
result<- fit_and_noplot(citation_growth_paper)
new_row <- data.frame(paper_id = paper,
linear_se = result$linear_se,
exp_se = result$exp_se)
results_df <- rbind(results_df, new_row)
}
return (results_df)
}
plot_sse_boxplots <- function(se_df) {
# Gather SSE values into a long format
se_long <- data.frame(
model = rep(c("linear", "exp"), each = nrow(se_df)),
sse = c(se_df$linear_se,  se_df$exp_se),
paper = rep(se_df$paper_id, 3)
)
# Create boxplot
boxplot(sse ~ model, data = sse_long,
main = "Comparison of Model Performance",
xlab = "Model", ylab = "Sum of Squared Errors (SSE)")
}
papers_classA_SSE <- get_SSE_table(graph,papers_classA,dates_matrix)
plot_sse_boxplots(papers_classA_SSE)
papers_classA_SSE
papers_classA_SSE <- get_SE_table(graph,papers_classA,dates_matrix)
plot_sse_boxplots(papers_classA_SSE)
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
plot_sse_boxplots(papers_classA_SSE)
get_SE_table <- function(graph, papers,dates_matrix){
results_df <- data.frame(paper_id = character(),
linear_sse = numeric(),
exp_sse = numeric())
for( paper in papers){
paper_citation_dates <- get_neighbours_dates(graph,paper,dates_matrix)
citation_growth_paper <- get_citationgrowth_data(paper_citation_dates)
result<- fit_and_noplot(citation_growth_paper)
new_row <- data.frame(paper_id = paper,
linear_se = result$linear_se,
exp_se = result$exp_se)
results_df <- rbind(results_df, new_row)
}
return (results_df)
}
plot_se_boxplots <- function(se_df) {
boxplot(se_df$linear_se, se_df$exp_se,
names = c("Linear Model", "Exponential Model"),
col = c("lightblue", "lightgreen"),
main = "Standard Error Boxplots",
ylab = "Standard Error",
xlab = "Model Type")
}
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
plot_sse_boxplots(papers_classA_SSE)
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
plot_se_boxplots(papers_classA_SSE)
papers_classB_SE <-get_SE_table(graph,papers_classB,dates_matrix)
plot_se_boxplots(papers_classB_SE)
select_random_papers <- function(papers, seed, n) {
# Set the random seed for reproducibility
set.seed(seed)
# Sample n random papers without replacement
random_papers <- sample(papers, n, replace = FALSE)
return(random_papers)
}
papers_classB_sample <- select_random_papers(papers_classB,2000,30)
papers_classB_sample_SE <- get_SE_table(graph,papers_classB_sample,dates_matrix)
papers_classB_sample_SE
plot_se_boxplots(papers_classB_sample_SE)
papers_classC_sample <- select_random_papers(papers_classC,2000,30)
papers_classC_sample_SE <- get_SE_table(graph,papers_classC_sample,dates_matrix)
papers_classC_sample <- select_random_papers(papers_classC,2000,30)
papers_classC_sample_SE <- get_SE_table(graph,papers_classC_sample,dates_matrix)
papers_classC <- get_nodes_by_indegree_range(graph,50,99)
papers_classC
papers_classB_sample <- select_random_papers(papers_classB,2000,30)
papers_classB_sample_SE <- get_SE_table(graph,papers_classB_sample,dates_matrix)
papers_classB_sample_SE
plot_se_boxplots(papers_classB_sample_SE)
papers_classC_sample <- select_random_papers(papers_classC,2000,30)
papers_classC_sample_SE <- get_SE_table(graph,papers_classC_sample,dates_matrix)
papers_classC_sample_SE
plot_se_boxplots(papers_classC_sample_SE)
plot_and_compute_correlation <- function(graph, se_df) {
# Ensure the input data frame has the required columns
if (!all(c("paper_id", "linear_se", "exp_se") %in% colnames(se_df))) {
stop("Input data frame must contain 'paper_id', 'linear_se' and 'exp_se' columns.")
}
# Calculate the coefficient exp_se / linear_se
se_df$se_ratio <- se_df$exp_se / se_df$linear_se
# Retrieve the in-degree for each paper (node) from the graph
in_degree <- igraph::degree(graph, v = se_df$paper_id, mode = "in")
# Ensure in-degree matches the number of papers in the se_df
if (length(in_degree) != nrow(se_df)) {
stop("Number of nodes in graph and rows in se_df do not match.")
}
# Add the in-degree to the se_df
se_df$in_degree <- in_degree
# Compute the correlation between in-degree and the coefficient
correlation <- cor(se_df$in_degree, se_df$se_ratio)
# Plot the relationship between in-degree and the coefficient
plot(se_df$in_degree, se_df$se_ratio,
xlab = "In-Degree", ylab = "exp_se / linear_se",
main = paste("Correlation between In-Degree and SE Ratio\nCorrelation: ", round(correlation, 2)),
pch = 19, col = "blue")
# Return the correlation value
return(correlation)
}
plot_and_compute_correlation(papers_classA_SE,graph)
papers_classA_SE
get_SE_table <- function(graph, papers,dates_matrix){
results_df <- data.frame(paper_id = character(),
linear_sse = numeric(),
exp_sse = numeric())
for( paper in papers){
paper_citation_dates <- get_neighbours_dates(graph,paper,dates_matrix)
citation_growth_paper <- get_citationgrowth_data(paper_citation_dates)
result<- fit_and_noplot(citation_growth_paper)
new_row <- data.frame(paper_id = paper$name,
linear_se = result$linear_se,
exp_se = result$exp_se)
results_df <- rbind(results_df, new_row)
}
return (results_df)
}
plot_se_boxplots <- function(se_df) {
boxplot(se_df$linear_se, se_df$exp_se,
names = c("Linear Model", "Exponential Model"),
col = c("lightblue", "lightgreen"),
main = "Standard Error Boxplots",
ylab = "Standard Error",
xlab = "Model Type")
}
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
head(papers_classA)
get_SE_table <- function(graph, papers,dates_matrix){
results_df <- data.frame(paper_id = character(),
linear_sse = numeric(),
exp_sse = numeric())
for( paper in papers){
node_name <- V(graph)$name[V(graph) == as.character(paper)]
paper_citation_dates <- get_neighbours_dates(graph,paper,dates_matrix)
citation_growth_paper <- get_citationgrowth_data(paper_citation_dates)
result<- fit_and_noplot(citation_growth_paper)
new_row <- data.frame(node_name = node_name,
linear_se = result$linear_se,
exp_se = result$exp_se)
results_df <- rbind(results_df, new_row)
}
return (results_df)
}
plot_se_boxplots <- function(se_df) {
boxplot(se_df$linear_se, se_df$exp_se,
names = c("Linear Model", "Exponential Model"),
col = c("lightblue", "lightgreen"),
main = "Standard Error Boxplots",
ylab = "Standard Error",
xlab = "Model Type")
}
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
plot_se_boxplots(papers_classA_SSE)
papers_classA_SE
select_random_papers <- function(papers, seed, n) {
# Set the random seed for reproducibility
set.seed(seed)
# Sample n random papers without replacement
random_papers <- sample(papers, n, replace = FALSE)
return(random_papers)
}
papers_classB_sample <- select_random_papers(papers_classB,2000,30)
papers_classB_sample_SE <- get_SE_table(graph,papers_classB_sample,dates_matrix)
papers_classB_sample_SE
plot_se_boxplots(papers_classB_sample_SE)
papers_classC_sample <- select_random_papers(papers_classC,2000,30)
papers_classC_sample_SE <- get_SE_table(graph,papers_classC_sample,dates_matrix)
papers_classC_sample_SE
plot_se_boxplots(papers_classC_sample_SE)
plot_and_compute_correlation <- function(graph, se_df) {
# Ensure the data frame has columns for node_name, linear_se, and exp_se
if (!all(c("node_name", "linear_se", "exp_se") %in% colnames(se_df))) {
stop("se_df must contain 'node_name', 'linear_se', and 'exp_se' columns.")
}
# Calculate in-degree for each node in the graph
in_degrees <- degree(graph, mode = "in")
# Merge the in-degree values with the SE data frame by node_name
se_df$in_degree <- in_degrees[se_df$node_name]
# Calculate the ratio of exp_se to linear_se
se_df$exp_to_linear_se <- se_df$exp_se / se_df$linear_se
# Plot the in-degree vs. exp_to_linear_se
boxplot(exp_to_linear_se ~ in_degree, data = se_df,
xlab = "In-degree", ylab = "exp_se / linear_se",
main = "Correlation between In-degree and exp_se / linear_se")
# Compute the correlation between in-degree and the ratio exp_se / linear_se
correlation <- cor(se_df$in_degree, se_df$exp_to_linear_se, use = "complete.obs")
# Return the correlation value
return(correlation)
}
plot_and_compute_correlation(papers_classA_SE,graph)
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
plot_se_boxplots(papers_classA_SSE)
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
papers_classA_SE
plot_se_boxplots(papers_classA_SSE)
papers_classA_SE
plot_se_boxplots(papers_classA_SSE)
plot_and_compute_correlation <- function(graph, se_df) {
# Ensure the data frame has columns for node_name, linear_se, and exp_se
if (!all(c("node_name", "linear_se", "exp_se") %in% colnames(se_df))) {
stop("se_df must contain 'node_name', 'linear_se', and 'exp_se' columns.")
}
# Calculate in-degree for each node in the graph
in_degrees <- degree(graph, mode = "in")
# Merge the in-degree values with the SE data frame by node_name
se_df$in_degree <- in_degrees[se_df$node_name]
# Calculate the ratio of exp_se to linear_se
se_df$exp_to_linear_se <- se_df$exp_se / se_df$linear_se
# Plot the in-degree vs. exp_to_linear_se
boxplot(exp_to_linear_se ~ in_degree, data = se_df,
xlab = "In-degree", ylab = "exp_se / linear_se",
main = "Correlation between In-degree and exp_se / linear_se")
# Compute the correlation between in-degree and the ratio exp_se / linear_se
correlation <- cor(se_df$in_degree, se_df$exp_to_linear_se, use = "complete.obs")
# Return the correlation value
return(correlation)
}
par(mar=c(0,0,0,0))
plot_and_compute_correlation(papers_classA_SE,graph)
head(papers_classA_SE)
colnames(papers_classA_SE)
str(papers_classA_SE)
plot_and_compute_correlation(graph,papers_classA_SE)
par(mar=c(0,0,0,0))
plot_and_compute_correlation(graph,papers_classA_SE)
plot_and_compute_correlation <- function(graph, se_df) {
# Check if required columns exist
required_columns <- c("node_name", "linear_se", "exp_se")
missing_columns <- setdiff(required_columns, colnames(se_df))
if(length(missing_columns) > 0) {
stop(paste("se_df is missing the following columns:", paste(missing_columns, collapse = ", ")))
}
# Calculate in-degree for each node in the graph
in_degrees <- degree(graph, mode = "in")
# Merge the in-degree values with the SE data frame by node_name
se_df$in_degree <- in_degrees[se_df$node_name]
# Calculate the ratio of exp_se to linear_se
se_df$exp_to_linear_se <- se_df$exp_se / se_df$linear_se
# Scatter plot of in-degree vs. exp_se / linear_se
plot(se_df$in_degree, se_df$exp_to_linear_se,
xlab = "In-degree", ylab = "exp_se / linear_se",
main = "Scatter plot of In-degree vs. exp_se / linear_se",
pch = 19, col = "blue")
# Compute the correlation between in-degree and the ratio exp_se / linear_se
correlation <- cor(se_df$in_degree, se_df$exp_to_linear_se, use = "complete.obs")
# Return the correlation value
return(correlation)
}
plot_and_compute_correlation(papers_classA_SE,graph)
plot_and_compute_correlation <- function(graph, se_df) {
# Check if required columns exist
required_columns <- c("node_name", "linear_se", "exp_se")
missing_columns <- setdiff(required_columns, colnames(se_df))
if(length(missing_columns) > 0) {
stop(paste("se_df is missing the following columns:", paste(missing_columns, collapse = ", ")))
}
# Calculate in-degree for each node in the graph
in_degrees <- degree(graph, mode = "in")
# Merge the in-degree values with the SE data frame by node_name
se_df$in_degree <- in_degrees[se_df$node_name]
# Calculate the ratio of exp_se to linear_se
se_df$exp_to_linear_se <- se_df$exp_se / se_df$linear_se
# Scatter plot of in-degree vs. exp_se / linear_se
plot(se_df$in_degree, se_df$exp_to_linear_se,
xlab = "In-degree", ylab = "exp_se / linear_se",
main = "Scatter plot of In-degree vs. exp_se / linear_se",
pch = 19, col = "blue")
# Compute the correlation between in-degree and the ratio exp_se / linear_se
correlation <- cor(se_df$in_degree, se_df$exp_to_linear_se, use = "complete.obs")
# Return the correlation value
return(correlation)
}
plot_and_compute_correlation(graph,papers_classA_SE)
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,10,900),2000,100)
papers_sample_se <- get_SE_table(graph,papers_sample,dates_matrix)
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,50,900),2000,100)
papers_sample_se <- get_SE_table(graph,papers_sample,dates_matrix)
plot_and_compute_correlation(graph,papers_sample_se)
fit_and_plot <- function(cf) {
# Create a data frame from the cumulative frequency data
start_year <- min(as.numeric(names(cf)))
df <- data.frame(year = start_year:2002, cf = cf)
# Fit linear, polynomial, and exponential models
linear_model <- lm(cf ~ year, data = df)
poly_model <- lm(cf ~ poly(year, 2), data = df)
exp_model <- glm(cf ~ year, data = df, family = poisson)
# Extract standard error (mean) for each model
linear_se <- mean(summary(linear_model)$residuals^2)
exp_se <- mean(summary(exp_model)$residuals^2)
# Plot the data and fitted models
plot(df$year, df$cf, type = "b", xlab = "Year", ylab = "Cumulative Frequency")
lines(df$year, predict(linear_model), col = "red")
lines(df$year, predict(exp_model, type = "response"), col = "green")
lines(df$year, predict(poly_model), col = "blue")
legend("topleft", legend = c("Linear", "Exponential", "Polynomial"),
col = c("red", "green", "blue"), lty = 1)
# Return mean standard error values
return(list(linear_se = linear_se, exp_se = exp_se))
}
fit_and_plot(test_growth)
fit_and_noplot <- function(cf) {
# Create a data frame from the cumulative frequency data
start_year <- min(as.numeric(names(cf)))
df <- data.frame(year = start_year:2002, cf = cf)
# Fit linear, polynomial, and exponential models
linear_model <- lm(cf ~ year, data = df)
exp_model <- glm(cf ~ year, data = df, family = poisson)
# Extract standard error (mean) for each model
linear_se <- mean(summary(linear_model)$residuals^2)
exp_se <- mean(summary(exp_model)$residuals^2)
# Return mean standard error values
return(list(linear_se = linear_se,  exp_se = exp_se))
}
fit_and_noplot(test_growth)
fit_and_noplot <- function(cf) {
# Create a data frame from the cumulative frequency data
start_year <- min(as.numeric(names(cf)))
df <- data.frame(year = start_year:2002, cf = cf)
# Fit linear, polynomial, and exponential models
linear_model <- lm(cf ~ year, data = df)
exp_model <- glm(cf ~ year, data = df, family = poisson)
# Extract standard error (mean) for each model
linear_se <- mean(summary(linear_model)$residuals^2)
exp_se <- mean(exp_model$residuals^2)
# Return mean standard error values
return(list(linear_se = linear_se,  exp_se = exp_se))
}
fit_and_noplot(test_growth)
fit_and_plot <- function(cf) {
# Create a data frame from the cumulative frequency data
start_year <- min(as.numeric(names(cf)))
df <- data.frame(year = start_year:2002, cf = cf)
# Fit linear, polynomial, and exponential models
linear_model <- lm(cf ~ year, data = df)
poly_model <- lm(cf ~ poly(year, 2), data = df)
exp_model <- glm(cf ~ year, data = df, family = poisson)
# Extract standard error (mean) for each model
linear_se <- mean(summary(linear_model)$residuals^2)
exp_se <- mean(exp_model$residuals^2)
# Plot the data and fitted models
plot(df$year, df$cf, type = "b", xlab = "Year", ylab = "Cumulative Frequency")
lines(df$year, predict(linear_model), col = "red")
lines(df$year, predict(exp_model, type = "response"), col = "green")
lines(df$year, predict(poly_model), col = "blue")
legend("topleft", legend = c("Linear", "Exponential", "Polynomial"),
col = c("red", "green", "blue"), lty = 1)
# Return mean standard error values
return(list(linear_se = linear_se, exp_se = exp_se))
}
fit_and_plot(test_growth)
get_SE_table <- function(graph, papers,dates_matrix){
results_df <- data.frame(paper_id = character(),
linear_sse = numeric(),
exp_sse = numeric())
for( paper in papers){
node_name <- V(graph)$name[V(graph) == as.character(paper)]
paper_citation_dates <- get_neighbours_dates(graph,paper,dates_matrix)
citation_growth_paper <- get_citationgrowth_data(paper_citation_dates)
result<- fit_and_noplot(citation_growth_paper)
new_row <- data.frame(node_name = node_name,
linear_se = result$linear_se,
exp_se = result$exp_se)
results_df <- rbind(results_df, new_row)
}
return (results_df)
}
plot_se_boxplots <- function(se_df) {
boxplot(se_df$linear_se, se_df$exp_se,
names = c("Linear Model", "Exponential Model"),
col = c("lightblue", "lightgreen"),
main = "Standard Error Boxplots",
ylab = "Standard Error",
xlab = "Model Type")
}
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
papers_classA_SE
plot_se_boxplots(papers_classA_SSE)
select_random_papers <- function(papers, seed, n) {
# Set the random seed for reproducibility
set.seed(seed)
# Sample n random papers without replacement
random_papers <- sample(papers, n, replace = FALSE)
return(random_papers)
}
papers_classB_sample <- select_random_papers(papers_classB,2000,30)
papers_classB_sample_SE <- get_SE_table(graph,papers_classB_sample,dates_matrix)
papers_classB_sample_SE
plot_se_boxplots(papers_classB_sample_SE)
papers_classC_sample <- select_random_papers(papers_classC,2000,30)
papers_classC_sample_SE <- get_SE_table(graph,papers_classC_sample,dates_matrix)
papers_classC_sample_SE
plot_se_boxplots(papers_classC_sample_SE)
plot_and_compute_correlation <- function(graph, se_df) {
# Check if required columns exist
required_columns <- c("node_name", "linear_se", "exp_se")
missing_columns <- setdiff(required_columns, colnames(se_df))
if(length(missing_columns) > 0) {
stop(paste("se_df is missing the following columns:", paste(missing_columns, collapse = ", ")))
}
# Calculate in-degree for each node in the graph
in_degrees <- degree(graph, mode = "in")
# Merge the in-degree values with the SE data frame by node_name
se_df$in_degree <- in_degrees[se_df$node_name]
# Calculate the ratio of exp_se to linear_se
se_df$exp_to_linear_se <- se_df$exp_se / se_df$linear_se
# Scatter plot of in-degree vs. exp_se / linear_se
plot(se_df$in_degree, se_df$exp_to_linear_se,
xlab = "In-degree", ylab = "exp_se / linear_se",
main = "Scatter plot of In-degree vs. exp_se / linear_se",
pch = 19, col = "blue")
# Compute the correlation between in-degree and the ratio exp_se / linear_se
correlation <- cor(se_df$in_degree, se_df$exp_to_linear_se, use = "complete.obs")
# Return the correlation value
return(correlation)
}
plot_and_compute_correlation(graph,papers_classA_SE)
papers_sample <- select_random_papers(get_nodes_by_indegree_range(graph,50,900),2000,100)
papers_sample_se <- get_SE_table(graph,papers_sample,dates_matrix)
plot_and_compute_correlation(graph,papers_sample_se)
get_SE_table <- function(graph, papers,dates_matrix){
results_df <- data.frame(paper_id = character(),
linear_sse = numeric(),
exp_sse = numeric())
for( paper in papers){
node_name <- V(graph)$name[V(graph) == as.character(paper)]
paper_citation_dates <- get_neighbours_dates(graph,paper,dates_matrix)
citation_growth_paper <- get_citationgrowth_data(paper_citation_dates)
result<- fit_and_noplot(citation_growth_paper)
new_row <- data.frame(node_name = node_name,
linear_se = result$linear_se,
exp_se = result$exp_se)
results_df <- rbind(results_df, new_row)
}
return (results_df)
}
plot_se_boxplots <- function(se_df) {
boxplot(se_df$linear_se, se_df$exp_se,
names = c("Linear Model", "Exponential Model"),
col = c("lightblue", "lightgreen"),
main = "MSE Boxplots",
ylab = "MSE Error",
xlab = "Model Type")
}
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
papers_classA_SE
plot_se_boxplots(papers_classA_SSE)
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
papers_classA_SE
plot_se_boxplots(papers_classA_SSE, "Class A MSE")
get_SE_table <- function(graph, papers,dates_matrix){
results_df <- data.frame(paper_id = character(),
linear_sse = numeric(),
exp_sse = numeric())
for( paper in papers){
node_name <- V(graph)$name[V(graph) == as.character(paper)]
paper_citation_dates <- get_neighbours_dates(graph,paper,dates_matrix)
citation_growth_paper <- get_citationgrowth_data(paper_citation_dates)
result<- fit_and_noplot(citation_growth_paper)
new_row <- data.frame(node_name = node_name,
linear_se = result$linear_se,
exp_se = result$exp_se)
results_df <- rbind(results_df, new_row)
}
return (results_df)
}
plot_se_boxplots <- function(se_df,title) {
boxplot(se_df$linear_se, se_df$exp_se,
names = c("Linear Model", "Exponential Model"),
col = c("lightblue", "lightgreen"),
main = title,
ylab = "MSE Error",
xlab = "Model Type")
}
papers_classA_SE <- get_SE_table(graph,papers_classA,dates_matrix)
papers_classA_SE
plot_se_boxplots(papers_classA_SSE, "Class A MSE")
papers_classB_sample <- select_random_papers(papers_classB,2000,30)
papers_classB_sample_SE <- get_SE_table(graph,papers_classB_sample,dates_matrix)
papers_classB_sample_SE
plot_se_boxplots(papers_classB_sample_SE,"Class B Sample MSE")
papers_classC_sample <- select_random_papers(papers_classC,2000,30)
papers_classC_sample_SE <- get_SE_table(graph,papers_classC_sample,dates_matrix)
papers_classC_sample_SE
plot_se_boxplots(papers_classC_sample_SE, "Class C Sample MSE")
